#include <boost/test/unit_test.hpp>

#include <boost/test/data/monomorphic.hpp>
#include <boost/test/data/test_case.hpp>
#include <boost/test/test_tools.hpp>

#include <iostream>
#include <vector>

#include <src/byte_vector_io.h>
#include <src/scte35/emitter.h>
#include <src/scte35/parser.h>
#include <src/scte35/scte35.h>

namespace data = boost::unit_test::data;
namespace s = metamix::scte35;

std::vector<uint8_t> splice_null_input{
  0xfc, 0x30, 0x11, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x4f, 0x25, 0x33, 0x96,
};

s::SpliceInfoSection splice_null(false, 0, 0, 0, 0xfff, s::SpliceNull{});

std::vector<uint8_t> splice_insert_input{
  0xfc, 0x30, 0x2f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0x05, 0x00, 0x00, 0x02,
  0x96, 0x7f, 0xef, 0xff, 0xe1, 0x6a, 0x1a, 0xb8, 0x7e, 0x01, 0x4c, 0x56, 0x20, 0x00, 0x01, 0x00, 0x00,
  0x00, 0x0a, 0x00, 0x08, 0x43, 0x55, 0x45, 0x49, 0x00, 0x00, 0x00, 0x00, 0x10, 0xfa, 0x4d, 0x9e,
};

s::SpliceInfoSection splice_insert(false,
                                   0,
                                   0,
                                   0,
                                   0xfff,
                                   s::SpliceInsert(0x00000296,
                                                   s::SpliceInsert::CancelOff(1,
                                                                              1,
                                                                              0,
                                                                              s::SpliceTime(8'076'794'552),
                                                                              std::nullopt,
                                                                              s::BreakDuration(false, 0x14C5620),
                                                                              0x0001,
                                                                              0,
                                                                              0)),
                                   s::SpliceInfoSection::Descriptors{ s::AvailDescriptor(0) });

std::vector<uint8_t> sample_input{
  0x00, 0xfc, 0x30, 0x2f, 0x00, 0x00, 0xcf, 0xa9, 0x79, 0x82, 0x00, 0xff, 0xff, 0xff, 0x05, 0x62, 0x00,
  0x20, 0x02, 0x7f, 0xef, 0xff, 0x58, 0xed, 0xe3, 0x44, 0xfe, 0x00, 0x7b, 0x98, 0xa0, 0x03, 0x35, 0x00,
  0x00, 0x00, 0x0a, 0x00, 0x08, 0x43, 0x55, 0x45, 0x49, 0x00, 0x38, 0x32, 0x31, 0x51, 0xc6, 0x30, 0xe9,
};

s::SpliceInfoSection sample(false,
                            0,
                            3483990402,
                            0,
                            4095,
                            s::SpliceInsert(1644175362,
                                            s::SpliceInsert::CancelOff(true,
                                                                       true,
                                                                       false,
                                                                       s::SpliceTime(5786952516),
                                                                       std::nullopt,
                                                                       s::BreakDuration(true, 8100000),
                                                                       821,
                                                                       0,
                                                                       0)),
                            s::SpliceInfoSection::Descriptors{ s::AvailDescriptor(3682865) });

std::vector<uint8_t> segmentation_descriptor_input{
  0x00, 0xfc, 0x30, 0x7b, 0x00, 0x00, 0x6d, 0x71, 0xc7, 0xef, 0x00, 0xff, 0xf0, 0x05, 0x06, 0xfe, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x65, 0x02, 0x52, 0x43, 0x55, 0x45, 0x49, 0x00, 0x00, 0x00, 0x09, 0x7f, 0x97, 0x0d, 0x43, 0x09, 0x21,
  0x42, 0x4c, 0x41, 0x43, 0x4b, 0x4f, 0x55, 0x54, 0x3a, 0x53, 0x71, 0x2b, 0x6b, 0x59, 0x39, 0x6d, 0x75, 0x51, 0x64,
  0x65, 0x72, 0x47, 0x4e, 0x69, 0x4e, 0x74, 0x4f, 0x6f, 0x4e, 0x36, 0x77, 0x3d, 0x3d, 0x0e, 0x1e, 0x63, 0x6f, 0x6d,
  0x63, 0x61, 0x73, 0x74, 0x3a, 0x6c, 0x69, 0x6e, 0x65, 0x61, 0x72, 0x3a, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65,
  0x72, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x40, 0x00, 0x00, 0x02, 0x0f, 0x43, 0x55, 0x45, 0x49, 0x00, 0x00,
  0x00, 0x09, 0x7f, 0x97, 0x00, 0x00, 0x41, 0x00, 0x00, 0x7a, 0xd7, 0xa4, 0x65,
};

s::SpliceInfoSection segmentation_descriptor(
  false,
  0,
  1836173295,
  0,
  4095,
  s::TimeSignal(s::SpliceTime(0)),
  s::SpliceInfoSection::Descriptors{
    s::SegmentationDescriptor(std::vector<uint8_t>{
      0x00, 0x00, 0x00, 0x09, 0x7f, 0x97, 0x0d, 0x43, 0x09, 0x21, 0x42, 0x4c, 0x41, 0x43, 0x4b, 0x4f,
      0x55, 0x54, 0x3a, 0x53, 0x71, 0x2b, 0x6b, 0x59, 0x39, 0x6d, 0x75, 0x51, 0x64, 0x65, 0x72, 0x47,
      0x4e, 0x69, 0x4e, 0x74, 0x4f, 0x6f, 0x4e, 0x36, 0x77, 0x3d, 0x3d, 0x0e, 0x1e, 0x63, 0x6f, 0x6d,
      0x63, 0x61, 0x73, 0x74, 0x3a, 0x6c, 0x69, 0x6e, 0x65, 0x61, 0x72, 0x3a, 0x6c, 0x69, 0x63, 0x65,
      0x6e, 0x73, 0x65, 0x72, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x40, 0x00, 0x00,
    }),
    s::SegmentationDescriptor(std::vector<uint8_t>{
      0x00,
      0x00,
      0x00,
      0x09,
      0x7f,
      0x97,
      0x00,
      0x00,
      0x41,
      0x00,
      0x00,
    }) });

std::vector<uint8_t> sample_malformed{
  0x00, 0xfc, 0x00, 0x2c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xf0, 0x05, 0x06,
  0xfe, 0x86, 0xdf, 0x75, 0x50, 0x00, 0x11, 0x02, 0x0f, 0x43, 0x55, 0x45, 0x49, 0x41, 0x42,
  0x43, 0x44, 0x7f, 0x8f, 0x00, 0x00, 0x10, 0x01, 0x01, 0x3a, 0x6d, 0xda, 0xee,
};

std::vector<uint8_t> inputs[] = {
  splice_null_input,
  splice_insert_input,
  sample_input,
  segmentation_descriptor_input,
};

s::SpliceInfoSection splices[] = {
  splice_null,
  splice_insert,
  sample,
  segmentation_descriptor,
};

size_t sizes[] = {
  splice_null_input.size(),
  splice_insert_input.size(),
  sample_input.size() - 1,
  segmentation_descriptor_input.size() - 1,
};

std::vector<uint8_t> malformed[] = {
  sample_malformed,
};

BOOST_AUTO_TEST_SUITE(scte35_parser_emitter_test)

BOOST_DATA_TEST_CASE(scte35_parse, data::make(inputs) ^ splices, input, splice)
{
  auto parser = s::Scte35Parser::create(input);
  BOOST_CHECK(!!parser);
  auto next = parser.next();
  BOOST_CHECK(!parser);
  BOOST_REQUIRE(next.has_value());
  s::SpliceInfoSection actual = *next;
  BOOST_TEST(actual == splice);
}

BOOST_DATA_TEST_CASE(scte35_parse_malformed, data::make(malformed), input)
{
  auto parser = s::Scte35Parser::create(input);
  BOOST_CHECK(!!parser);
  BOOST_CHECK_THROW(parser.next(), metamix::BinaryParseError);
}

BOOST_DATA_TEST_CASE(scte32_emit_and_parse, data::make(splices), splice)
{
  std::vector<uint8_t> data;
  s::emit(splice, std::back_inserter(data));
  BOOST_TEST(s::emit_size_hint(splice) == data.size());

  auto parser = s::Scte35Parser::create(data);
  BOOST_CHECK(!!parser);
  auto next = parser.next();
  BOOST_CHECK(!parser);
  BOOST_REQUIRE(next.has_value());
  s::SpliceInfoSection parsed = *next;
  BOOST_TEST(parsed == splice);
}

BOOST_AUTO_TEST_SUITE_END()

#include <boost/test/unit_test.hpp>

#include <boost/test/data/monomorphic.hpp>
#include <boost/test/data/test_case.hpp>
#include <boost/test/test_tools.hpp>

#include <array>
#include <iostream>
#include <vector>

#include <src/byte_vector_io.h>
#include <src/h264/rbsp.h>
#include <src/util.h>

namespace data = boost::unit_test::data;
using namespace metamix;
using namespace metamix::h264;

std::vector<uint8_t> empty{};
std::vector<uint8_t> empty_sodb{};

std::vector<uint8_t> synth_one{ 0x01, 0x80 };
std::vector<uint8_t> synth_one_sodb{ 0x01 };

std::vector<uint8_t> synth_two{ 0x09, 0x30, 0x80 };
std::vector<uint8_t> synth_two_sodb{ 0x09, 0x30 };

std::vector<uint8_t> synth_three{ 0x01, 0x02, 0x03, 0x80 };
std::vector<uint8_t> synth_three_sodb{ 0x01, 0x02, 0x03 };

std::vector<uint8_t> synth_ebsp_one{ 0x00, 0x00, 0x03, 0x01, 0x80 };
std::vector<uint8_t> synth_ebsp_one_sodb{ 0x00, 0x00, 0x01 };

// Borrowed from libcaption tests
std::vector<uint8_t> sei{
  0x06, 0x04, 0x68, 0xB5, 0x00, 0x31, 0x47, 0x41, 0x39, 0x34, 0x03, 0xDF, 0xFF, 0xFC, 0xEC, 0xE5, 0xFC, 0xAE,
  0x80, 0xFC, 0x94, 0x52, 0xFC, 0x97, 0xA1, 0x00, 0x00, 0x03, 0x00, 0xFC, 0xDC, 0x20, 0xFC, 0x5E, 0x20, 0xFC,
  0xDF, 0x20, 0xFC, 0xE0, 0x20, 0xFC, 0x91, 0x38, 0xFC, 0x20, 0x80, 0xFC, 0x91, 0xBA, 0xFC, 0x20, 0xE9, 0xFC,
  0x13, 0xA4, 0xFC, 0x20, 0xEF, 0xFC, 0x13, 0x26, 0xFC, 0x20, 0x75, 0xFC, 0x92, 0xBC, 0xFC, 0x94, 0xF2, 0xFC,
  0x97, 0xA1, 0xFC, 0x61, 0x80, 0xFC, 0x13, 0x31, 0xFC, 0x20, 0xE5, 0xFC, 0x92, 0xB6, 0xFC, 0x20, 0xE9, 0xFC,
  0x92, 0xB9, 0xFC, 0x20, 0xEF, 0xFC, 0x13, 0xB3, 0xFC, 0x20, 0x75, 0xFC, 0x92, 0x25, 0xFC, 0x20, 0x80, 0xFF,

  0x04, 0x68, 0xB5, 0x00, 0x31, 0x47, 0x41, 0x39, 0x34, 0x03, 0xDF, 0xFF, 0xFC, 0xEC, 0xE5, 0xFC, 0xAE, 0x80,
  0xFC, 0x94, 0x52, 0xFC, 0x97, 0xA1, 0x00, 0x00, 0x03, 0x00, 0xFC, 0xDC, 0x20, 0xFC, 0x5E, 0x20, 0xFC, 0xDF,
  0x20, 0xFC, 0xE0, 0x20, 0xFC, 0x91, 0x38, 0xFC, 0x20, 0x80, 0xFC, 0x91, 0xBA, 0xFC, 0x20, 0xE9, 0xFC, 0x13,
  0xA4, 0xFC, 0x20, 0xEF, 0xFC, 0x13, 0x26, 0xFC, 0x20, 0x75, 0xFC, 0x92, 0xBC, 0xFC, 0x94, 0xF2, 0xFC, 0x97,
  0xA1, 0xFC, 0x61, 0x80, 0xFC, 0x13, 0x31, 0xFC, 0x20, 0xE5, 0xFC, 0x92, 0xB6, 0xFC, 0x20, 0xE9, 0xFC, 0x92,
  0xB9, 0xFC, 0x20, 0xEF, 0xFC, 0x13, 0xB3, 0xFC, 0x20, 0x75, 0xFC, 0x92, 0x25, 0xFC, 0x20, 0x80, 0xFF, 0x80,
};
std::vector<uint8_t> sei_sodb{
  0x06, 0x04, 0x68, 0xB5, 0x00, 0x31, 0x47, 0x41, 0x39, 0x34, 0x03, 0xDF, 0xFF, 0xFC, 0xEC, 0xE5, 0xFC, 0xAE,
  0x80, 0xFC, 0x94, 0x52, 0xFC, 0x97, 0xA1, 0x00, 0x00, 0x00, 0xFC, 0xDC, 0x20, 0xFC, 0x5E, 0x20, 0xFC, 0xDF,
  0x20, 0xFC, 0xE0, 0x20, 0xFC, 0x91, 0x38, 0xFC, 0x20, 0x80, 0xFC, 0x91, 0xBA, 0xFC, 0x20, 0xE9, 0xFC, 0x13,
  0xA4, 0xFC, 0x20, 0xEF, 0xFC, 0x13, 0x26, 0xFC, 0x20, 0x75, 0xFC, 0x92, 0xBC, 0xFC, 0x94, 0xF2, 0xFC, 0x97,
  0xA1, 0xFC, 0x61, 0x80, 0xFC, 0x13, 0x31, 0xFC, 0x20, 0xE5, 0xFC, 0x92, 0xB6, 0xFC, 0x20, 0xE9, 0xFC, 0x92,
  0xB9, 0xFC, 0x20, 0xEF, 0xFC, 0x13, 0xB3, 0xFC, 0x20, 0x75, 0xFC, 0x92, 0x25, 0xFC, 0x20, 0x80, 0xFF,

  0x04, 0x68, 0xB5, 0x00, 0x31, 0x47, 0x41, 0x39, 0x34, 0x03, 0xDF, 0xFF, 0xFC, 0xEC, 0xE5, 0xFC, 0xAE, 0x80,
  0xFC, 0x94, 0x52, 0xFC, 0x97, 0xA1, 0x00, 0x00, 0x00, 0xFC, 0xDC, 0x20, 0xFC, 0x5E, 0x20, 0xFC, 0xDF, 0x20,
  0xFC, 0xE0, 0x20, 0xFC, 0x91, 0x38, 0xFC, 0x20, 0x80, 0xFC, 0x91, 0xBA, 0xFC, 0x20, 0xE9, 0xFC, 0x13, 0xA4,
  0xFC, 0x20, 0xEF, 0xFC, 0x13, 0x26, 0xFC, 0x20, 0x75, 0xFC, 0x92, 0xBC, 0xFC, 0x94, 0xF2, 0xFC, 0x97, 0xA1,
  0xFC, 0x61, 0x80, 0xFC, 0x13, 0x31, 0xFC, 0x20, 0xE5, 0xFC, 0x92, 0xB6, 0xFC, 0x20, 0xE9, 0xFC, 0x92, 0xB9,
  0xFC, 0x20, 0xEF, 0xFC, 0x13, 0xB3, 0xFC, 0x20, 0x75, 0xFC, 0x92, 0x25, 0xFC, 0x20, 0x80, 0xFF,
};

std::vector<uint8_t> originals[] = { empty, synth_one, synth_two, synth_three, synth_ebsp_one, sei };

std::vector<uint8_t> sodbs[] = { empty_sodb,       synth_one_sodb,      synth_two_sodb,
                                 synth_three_sodb, synth_ebsp_one_sodb, sei_sodb };

int emulation_prevention_bytes_counts[] = {
  0, // empty
  0, // synth_one
  0, // synth_two
  0, // synth_three
  1, // synth_ebsp_one
  2, // sei
};

BOOST_AUTO_TEST_SUITE(rbsp_test)

BOOST_DATA_TEST_CASE(ebsp_to_rbsp, data::make(originals) ^ sodbs, orig, expected_sodb)
{
  std::vector<uint8_t> actual;
  copy_ebsp_to_rbsp(orig.begin(), orig.end(), std::back_inserter(actual));

  std::vector<uint8_t> expected(expected_sodb);
  if (!expected_sodb.empty()) {
    expected.push_back(0x80);
  }

  BOOST_CHECK_EQUAL_COLLECTIONS(actual.begin(), actual.end(), expected.begin(), expected.end());
}

BOOST_DATA_TEST_CASE(rbsp_to_ebsp, data::make(sodbs) ^ originals, orig_sodb, expected)
{
  std::vector<uint8_t> orig(orig_sodb);
  if (!orig_sodb.empty()) {
    orig.push_back(0x80);
  }

  std::vector<uint8_t> actual;
  copy_rbsp_to_ebsp(orig.begin(), orig.end(), std::back_inserter(actual));

  BOOST_CHECK_EQUAL_COLLECTIONS(actual.begin(), actual.end(), expected.begin(), expected.end());
}

BOOST_DATA_TEST_CASE(ebsp_to_sodb, data::make(originals) ^ sodbs, orig, sodb)
{
  std::vector<uint8_t> actual;
  copy_ebsp_to_sodb(orig.begin(), orig.end(), std::back_inserter(actual));

  BOOST_CHECK_EQUAL_COLLECTIONS(actual.begin(), actual.end(), sodb.begin(), sodb.end());
}

BOOST_DATA_TEST_CASE(sodb_to_ebsp, data::make(sodbs) ^ originals, orig, expected)
{
  std::vector<uint8_t> actual;
  copy_sodb_to_ebsp(orig.begin(), orig.end(), std::back_inserter(actual));

  BOOST_CHECK_EQUAL_COLLECTIONS(actual.begin(), actual.end(), expected.begin(), expected.end());
}

BOOST_DATA_TEST_CASE(emulation_prevention_bytes_counting,
                     data::make(originals) ^ emulation_prevention_bytes_counts,
                     orig,
                     count)
{
  BOOST_TEST(count_emulation_prevention_bytes(orig.begin(), orig.end()) == count);
}

BOOST_AUTO_TEST_SUITE_END()
